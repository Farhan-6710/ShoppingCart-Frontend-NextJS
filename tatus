[1mdiff --git a/app/cart/page.tsx b/app/cart/page.tsx[m
[1mindex c595d7c..f8b86e2 100644[m
[1m--- a/app/cart/page.tsx[m
[1m+++ b/app/cart/page.tsx[m
[36m@@ -1,7 +1,11 @@[m
 // app/cart/page.tsx[m
 [m
 import React from "react";[m
[32m+[m[32m<<<<<<< HEAD[m
 import MyCart from "@/src/components/sections/myCartSection/MyCart"; // Adjust the path if necessary[m
[32m+[m[32m=======[m
[32m+[m[32mimport MyCart from "@/components/sections/myCartSection/MyCart"; // Adjust the path if necessary[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 [m
 const MyCartPage: React.FC = () => {[m
   return ([m
[1mdiff --git a/app/contexts/CartContext.tsx b/app/contexts/CartContext.tsx[m
[1mnew file mode 100644[m
[1mindex 0000000..fd02496[m
[1m--- /dev/null[m
[1m+++ b/app/contexts/CartContext.tsx[m
[36m@@ -0,0 +1,107 @@[m
[32m+[m[32m"use client"[m
[32m+[m
[32m+[m[32mimport React, {[m
[32m+[m[32m  createContext,[m
[32m+[m[32m  useState,[m
[32m+[m[32m  useContext,[m
[32m+[m[32m  ReactNode,[m
[32m+[m[32m  useEffect,[m
[32m+[m[32m} from "react";[m
[32m+[m[32mimport { CartItem } from "@/types/cartItems";[m
[32m+[m
[32m+[m[32m// Define the currency type[m
[32m+[m[32mtype Currency = "USD" | "INR";[m
[32m+[m
[32m+[m[32minterface CartContextType {[m
[32m+[m[32m  cartItems: CartItem[];[m
[32m+[m[32m  addToCart: (product: CartItem) => void;[m
[32m+[m[32m  removeFromCart: (productId: number) => void;[m
[32m+[m[32m  isProductInCart: (productId: number) => boolean;[m
[32m+[m[32m  cartCount: number;[m
[32m+[m[32m  updateQuantity: (productId: number, quantity: number) => void;[m
[32m+[m[32m  currency: Currency;[m
[32m+[m[32m  setCurrency: (currency: Currency) => void;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst CartContext = createContext<CartContextType | undefined>(undefined);[m
[32m+[m
[32m+[m[32mexport const CartProvider: React.FC<{ children: ReactNode }> = ({[m
[32m+[m[32m  children,[m
[32m+[m[32m}) => {[m
[32m+[m[32m  const [cartItems, setCartItems] = useState<CartItem[]>([]);[m
[32m+[m[32m  const [currency, setCurrency] = useState<Currency>("USD");[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    // Load currency from localStorage if available[m
[32m+[m[32m    const storedCurrency = localStorage.getItem("currency") as Currency;[m
[32m+[m[32m    if (storedCurrency) {[m
[32m+[m[32m      setCurrency(storedCurrency);[m
[32m+[m[32m    }[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    // Store currency in localStorage whenever it changes[m
[32m+[m[32m    localStorage.setItem("currency", currency);[m
[32m+[m[32m  }, [currency]);[m
[32m+[m
[32m+[m[32m  const addToCart = (product: CartItem) => {[m
[32m+[m[32m    setCartItems((prevItems) => {[m
[32m+[m[32m      const existingProduct = prevItems.find((item) => item.id === product.id);[m
[32m+[m[32m      if (existingProduct) {[m
[32m+[m[32m        return prevItems.map((item) =>[m
[32m+[m[32m          item.id === product.id[m
[32m+[m[32m            ? { ...item, quantity: item.quantity + product.quantity }[m
[32m+[m[32m            : item,[m
[32m+[m[32m        );[m
[32m+[m[32m      }[m
[32m+[m[32m      return [...prevItems, product];[m
[32m+[m[32m    });[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const removeFromCart = (productId: number) => {[m
[32m+[m[32m    setCartItems((prevItems) =>[m
[32m+[m[32m      prevItems.filter((item) => item.id !== productId),[m
[32m+[m[32m    );[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const isProductInCart = (productId: number) => {[m
[32m+[m[32m    return cartItems.some((item) => item.id === productId);[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const updateQuantity = (productId: number, quantity: number) => {[m
[32m+[m[32m    if (quantity <= 0) return; // Prevent quantity from being zero or negative[m
[32m+[m[32m    setCartItems((prevItems) =>[m
[32m+[m[32m      prevItems.map((item) =>[m
[32m+[m[32m        item.id === productId ? { ...item, quantity } : item,[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  // Calculate the number of distinct items in the cart[m
[32m+[m[32m  const cartCount = cartItems.length;[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <CartContext.Provider[m
[32m+[m[32m      value={{[m
[32m+[m[32m        cartItems,[m
[32m+[m[32m        addToCart,[m
[32m+[m[32m        removeFromCart,[m
[32m+[m[32m        isProductInCart,[m
[32m+[m[32m        cartCount,[m
[32m+[m[32m        updateQuantity,[m
[32m+[m[32m        currency,[m
[32m+[m[32m        setCurrency,[m
[32m+[m[32m      }}[m
[32m+[m[32m    >[m
[32m+[m[32m      {children}[m
[32m+[m[32m    </CartContext.Provider>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport const useCart = (): CartContextType => {[m
[32m+[m[32m  const context = useContext(CartContext);[m
[32m+[m[32m  if (context === undefined) {[m
[32m+[m[32m    throw new Error("useCart must be used within a CartProvider");[m
[32m+[m[32m  }[m
[32m+[m[32m  return context;[m
[32m+[m[32m};[m
[1mdiff --git a/app/contexts/ThemeContext.tsx b/app/contexts/ThemeContext.tsx[m
[1mnew file mode 100644[m
[1mindex 0000000..e721c81[m
[1m--- /dev/null[m
[1m+++ b/app/contexts/ThemeContext.tsx[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m"use client"; // Add this directive if using Next.js 13+ with App Router[m
[32m+[m
[32m+[m[32mimport React, {[m
[32m+[m[32m  useState,[m
[32m+[m[32m  useEffect,[m
[32m+[m[32m  createContext,[m
[32m+[m[32m  useContext,[m
[32m+[m[32m  ReactNode,[m
[32m+[m[32m} from "react";[m
[32m+[m
[32m+[m[32mtype Theme = "light" | "dark";[m
[32m+[m
[32m+[m[32minterface ThemeContextType {[m
[32m+[m[32m  theme: Theme;[m
[32m+[m[32m  toggleTheme: () => void;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);[m
[32m+[m
[32m+[m[32mexport const useTheme = (): ThemeContextType => {[m
[32m+[m[32m  const context = useContext(ThemeContext);[m
[32m+[m[32m  if (context === undefined) {[m
[32m+[m[32m    throw new Error("useTheme must be used within a ThemeProvider");[m
[32m+[m[32m  }[m
[32m+[m[32m  return context;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({[m
[32m+[m[32m  children,[m
[32m+[m[32m}) => {[m
[32m+[m[32m  const [theme, setTheme] = useState<Theme>("light"); // Default to 'light' mode[m
[32m+[m
[32m+[m[32m  const toggleTheme = () => {[m
[32m+[m[32m    setTheme((prevTheme) => {[m
[32m+[m[32m      const newTheme = prevTheme === "light" ? "dark" : "light";[m
[32m+[m[32m      document.documentElement.setAttribute("data-theme", newTheme); // Apply the theme to the root element[m
[32m+[m[32m      return newTheme;[m
[32m+[m[32m    });[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    // Apply the initial theme to the root element on mount[m
[32m+[m[32m    document.documentElement.setAttribute("data-theme", theme);[m
[32m+[m[32m  }, [theme]);[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <ThemeContext.Provider value={{ theme, toggleTheme }}>[m
[32m+[m[32m      {children}[m
[32m+[m[32m    </ThemeContext.Provider>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[1mdiff --git a/app/layout.tsx b/app/layout.tsx[m
[1mindex a6094b7..c8257fa 100644[m
[1m--- a/app/layout.tsx[m
[1m+++ b/app/layout.tsx[m
[36m@@ -2,6 +2,7 @@[m
 [m
 import React, { useState, useEffect, useRef } from "react";[m
 import { Inter } from "next/font/google";[m
[32m+[m[32m<<<<<<< HEAD[m
 import HeaderOne from "@/src/components/headers/headerOne/HeaderOne";[m
 import HeaderTwo from "@/src/components/headers/headerTwo/HeaderTwo";[m
 import Sidebar from "@/src/components/headers/headerTwo/Sidebar";[m
[36m@@ -15,6 +16,21 @@[m [mimport { Provider, useSelector } from "react-redux";[m
 import ModeToggle from "@/src/components/extras/ModeToggle"; // Adjust the import path as necessary[m
 import "../node_modules/@fortawesome/fontawesome-free/css/all.min.css";[m
 import { RootState, store } from "@/src/store"; // Import RootState and store[m
[32m+[m[32m=======[m
[32m+[m[32mimport HeaderOne from "@/components/headers/HeaderOne/HeaderOne";[m
[32m+[m[32mimport HeaderTwo from "@/components/headers/HeaderTwo/HeaderTwo";[m
[32m+[m[32mimport Sidebar from "@/components/headers/HeaderTwo/Sidebar";[m
[32m+[m[32mimport Footer from "@/components/sections/footers/Footer"; // Import the Footer component[m
[32m+[m[32mimport FooterTwo from "@/components/sections/footers/FooterTwo";[m
[32m+[m[32mimport ScrollToTop from "@/components/extras/ScrollToTop"; // Import the ScrollToTop component[m
[32m+[m[32mimport "./globals.css";[m
[32m+[m[32mimport { config } from "@fortawesome/fontawesome-svg-core";[m
[32m+[m[32mimport "@fortawesome/fontawesome-svg-core/styles.css";[m
[32m+[m[32mimport { CartProvider } from "@/app/contexts/CartContext";[m
[32m+[m[32mimport { ThemeProvider } from "@/app/contexts/ThemeContext"; // Import ThemeProvider[m
[32m+[m[32mimport ModeToggle from "@/components/extras/ModeToggle"; // Adjust the import path as necessary[m
[32m+[m[32mimport "../node_modules/@fortawesome/fontawesome-free/css/all.min.css";[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 [m
 // Configure Font Awesome to prevent automatic CSS injection[m
 config.autoAddCss = false;[m
[36m@@ -22,6 +38,7 @@[m [mconfig.autoAddCss = false;[m
 // Initialize the Inter font[m
 const inter = Inter({ subsets: ["latin"] });[m
 [m
[32m+[m[32m<<<<<<< HEAD[m
 // Component to apply theme class based on Redux state[m
 const ThemeWrapper: React.FC<{ children: React.ReactNode }> = ({[m
   children,[m
[36m@@ -35,6 +52,8 @@[m [mconst ThemeWrapper: React.FC<{ children: React.ReactNode }> = ({[m
   return <>{children}</>;[m
 };[m
 [m
[32m+[m[32m=======[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 export default function RootLayout({[m
   children,[m
 }: {[m
[36m@@ -78,11 +97,21 @@[m [mexport default function RootLayout({[m
   }, []);[m
 [m
   return ([m
[32m+[m[32m<<<<<<< HEAD[m
     <Provider store={store}>[m
       <html lang="en">[m
         <body className={inter.className}>[m
           <ThemeWrapper>[m
             <div className="dark:bg-gray-900">[m
[32m+[m[32m=======[m
[32m+[m[32m    <html lang="en">[m
[32m+[m[32m      <body className={inter.className}>[m
[32m+[m[32m        <div className="dark:bg-gray-900">[m
[32m+[m[32m          <ThemeProvider>[m
[32m+[m[32m            {" "}[m
[32m+[m[32m            {/* Wrap the layout in ThemeProvider */}[m
[32m+[m[32m            <CartProvider>[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
               <header[m
                 className={`header ${isSticky ? "sticky" : ""}`}[m
                 ref={headerRef}[m
[36m@@ -115,10 +144,18 @@[m [mexport default function RootLayout({[m
               <Footer />[m
               <FooterTwo />[m
               <ScrollToTop /> {/* Add the ScrollToTop component here */}[m
[32m+[m[32m<<<<<<< HEAD[m
             </div>[m
           </ThemeWrapper>[m
         </body>[m
       </html>[m
     </Provider>[m
[32m+[m[32m=======[m
[32m+[m[32m            </CartProvider>[m
[32m+[m[32m          </ThemeProvider>[m
[32m+[m[32m        </div>[m
[32m+[m[32m      </body>[m
[32m+[m[32m    </html>[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
   );[m
 }[m
[1mdiff --git a/app/page.tsx b/app/page.tsx[m
[1mindex 9cbb3f9..9258615 100644[m
[1m--- a/app/page.tsx[m
[1m+++ b/app/page.tsx[m
[36m@@ -1,5 +1,6 @@[m
 "use client";[m
 [m
[32m+[m[32m<<<<<<< HEAD[m
 import React, { useState } from "react";[m
 import ProductCard from "@/src/components/sections/cardsSection/ProductCard";[m
 import productsData from "@/public/products.json";[m
[36m@@ -12,6 +13,13 @@[m [mimport {[m
   selectCartItems,[m
   selectCurrency,[m
 } from "@/src/features/cart/cartSlice"; // Import actions and selectors[m
[32m+[m[32m=======[m
[32m+[m[32mimport React, { useState, useEffect } from "react";[m
[32m+[m[32mimport ProductCard from "@/components/sections/cardsSection/ProductCard";[m
[32m+[m[32mimport productsData from "@/public/products.json";[m
[32m+[m[32mimport { useRouter } from "next/navigation";[m
[32m+[m[32mimport { useCart } from "@/app/contexts/CartContext";[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 import { Product } from "@/types/product";[m
 import { CartItem } from "@/types/cartItems";[m
 [m
[36m@@ -35,9 +43,13 @@[m [mconst Page: React.FC = () => {[m
   const [fadeClass, setFadeClass] = useState("");[m
   const router = useRouter();[m
 [m
[32m+[m[32m<<<<<<< HEAD[m
   const dispatch = useDispatch(); // Initialize the dispatch function[m
   const cartItems = useSelector((state: RootState) => state.cart.cartItems); // Get cart items from Redux state[m
   const currency = useSelector((state: RootState) => state.cart.currency); // Get currency from Redux state[m
[32m+[m[32m=======[m
[32m+[m[32m  const { addToCart, removeFromCart, isProductInCart, currency } = useCart();[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 [m
   const handleSearchSelect = (productName: string) => {[m
     if (productName === "Show All Products") {[m
[36m@@ -62,13 +74,22 @@[m [mconst Page: React.FC = () => {[m
       quantity: 1,[m
       currency,[m
     };[m
[32m+[m[32m<<<<<<< HEAD[m
     if (!cartItems.some((item) => item.id === product.id)) {[m
       dispatch(addToCart(cartItem));[m
[32m+[m[32m=======[m
[32m+[m[32m    if (!isProductInCart(product.id)) {[m
[32m+[m[32m      addToCart(cartItem);[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
     }[m
   };[m
 [m
   const handleRemoveFromCart = (productId: number) => {[m
[32m+[m[32m<<<<<<< HEAD[m
     dispatch(removeFromCart(productId));[m
[32m+[m[32m=======[m
[32m+[m[32m    removeFromCart(productId);[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
   };[m
 [m
   return ([m
[36m@@ -89,7 +110,11 @@[m [mconst Page: React.FC = () => {[m
                 rating={product.rating}[m
                 addToCart={() => handleAddToCart(product)}[m
                 removeFromCart={() => handleRemoveFromCart(product.id)}[m
[32m+[m[32m<<<<<<< HEAD[m
                 isInCart={cartItems.some((item) => item.id === product.id)}[m
[32m+[m[32m=======[m
[32m+[m[32m                isInCart={isProductInCart(product.id)}[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
                 currency={currency}[m
               />[m
             ))[m
[1mdiff --git a/app/products/[productName]/ProductPageClient.tsx b/app/products/[productName]/ProductPageClient.tsx[m
[1mindex bf65685..273be7f 100644[m
[1m--- a/app/products/[productName]/ProductPageClient.tsx[m
[1m+++ b/app/products/[productName]/ProductPageClient.tsx[m
[36m@@ -1,6 +1,7 @@[m
 "use client";[m
 [m
 import React from "react";[m
[32m+[m[32m<<<<<<< HEAD[m
 import ProductCard from "@/src/components/sections/cardsSection/ProductCard";[m
 import { useSelector, useDispatch } from "react-redux"; // Import Redux hooks[m
 import { RootState } from "@/src/store"; // Import RootState[m
[36m@@ -13,6 +14,14 @@[m [mimport { Product } from "@/types/product"; // Import Product type[m
 [m
 interface ProductPageClientProps {[m
   id: number;[m
[32m+[m[32m=======[m
[32m+[m[32mimport ProductCard from "@/components/sections/cardsSection/ProductCard";[m
[32m+[m[32mimport { useCart } from "@/app/contexts/CartContext";[m
[32m+[m[32mimport { Product } from "@/types/product"; // Import Product type[m
[32m+[m
[32m+[m[32minterface ProductPageClientProps {[m
[32m+[m[32m  id: number; // Added id prop for unique identification[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
   productName: string;[m
   imgSource: string;[m
   prices: {[m
[36m@@ -31,12 +40,20 @@[m [mconst ProductPageClient: React.FC<ProductPageClientProps> = ({[m
   rating = 0,[m
   currency,[m
 }) => {[m
[32m+[m[32m<<<<<<< HEAD[m
   const dispatch = useDispatch(); // Initialize the dispatch function[m
   const cartItems = useSelector((state: RootState) => state.cart.cartItems); // Get cart items from Redux state[m
 [m
   // Construct the product object with type Product[m
   const product: Product = {[m
     id,[m
[32m+[m[32m=======[m
[32m+[m[32m  const { addToCart, removeFromCart, isProductInCart } = useCart();[m
[32m+[m
[32m+[m[32m  // Construct the product object with type Product[m
[32m+[m[32m  const product: Product = {[m
[32m+[m[32m    id, // Use the id from props[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
     productName,[m
     imgSource,[m
     prices,[m
[36m@@ -44,6 +61,7 @@[m [mconst ProductPageClient: React.FC<ProductPageClientProps> = ({[m
   };[m
 [m
   // Check if the product is in the cart based on the product ID[m
[32m+[m[32m<<<<<<< HEAD[m
   const isInCart = cartItems.some((item) => item.id === product.id);[m
 [m
   // Handle adding the product to the cart[m
[36m@@ -59,11 +77,30 @@[m [mconst ProductPageClient: React.FC<ProductPageClientProps> = ({[m
         currency,[m
       })[m
     );[m
[32m+[m[32m=======[m
[32m+[m[32m  const isInCart = isProductInCart(product.id);[m
[32m+[m
[32m+[m[32m  // Handle adding the product to the cart[m
[32m+[m[32m  const handleAddToCart = () => {[m
[32m+[m[32m    addToCart({[m
[32m+[m[32m      id: product.id,[m
[32m+[m[32m      productName: product.productName,[m
[32m+[m[32m      imgSource: product.imgSource,[m
[32m+[m[32m      prices: product.prices,[m
[32m+[m[32m      rating: product.rating,[m
[32m+[m[32m      quantity: 1, // Default quantity[m
[32m+[m[32m      currency,[m
[32m+[m[32m    });[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
   };[m
 [m
   // Handle removing the product from the cart[m
   const handleRemoveFromCart = () => {[m
[32m+[m[32m<<<<<<< HEAD[m
     dispatch(removeFromCart(product.id));[m
[32m+[m[32m=======[m
[32m+[m[32m    removeFromCart(product.id);[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
   };[m
 [m
   return ([m
[1mdiff --git a/app/products/[productName]/page.tsx b/app/products/[productName]/page.tsx[m
[1mindex f30d373..1b38741 100644[m
[1m--- a/app/products/[productName]/page.tsx[m
[1m+++ b/app/products/[productName]/page.tsx[m
[36m@@ -1,11 +1,18 @@[m
 "use client";[m
 [m
 import React from "react";[m
[32m+[m[32m<<<<<<< HEAD[m
 import { useSelector } from "react-redux";[m
 import ProductPageClient from "./ProductPageClient";[m
 import productsData from "@/public/products.json";[m
 import { notFound } from "next/navigation";[m
 import { selectCurrency } from "@/src/features/cart/cartSlice"; // Import the Redux selector[m
[32m+[m[32m=======[m
[32m+[m[32mimport { useCart } from "@/app/contexts/CartContext"; // Import the context hook[m
[32m+[m[32mimport ProductPageClient from "./ProductPageClient";[m
[32m+[m[32mimport productsData from "@/public/products.json";[m
[32m+[m[32mimport { notFound } from "next/navigation";[m
[32m+[m[32m>>>>>>> 91df7186e774b2628c6a331e35f80886a5dcaef4[m
 [m
 interface Product {[m
   id: number;[m
[36m@@ -24,14 +31,22 @@[m [minterface ProductPageProps {[m
 [m
 const ProductPage: React.FC<ProductPageProps> = ({ params }) => {[m
   const { productName } = params;[m
[32m+[m[32m<<<<<<< HEAD[m
   const currency = useSelector(selectCurrency); // Fetch currency from Redux store[m
[32m+[m[32m=======[m
[32m+[m[32m  const { currency } = useCart(); // Fetch currency 